diff --git a/node_modules/eris/lib/voice/VoiceConnection.js b/node_modules/eris/lib/voice/VoiceConnection.js
index 6c0c24b..3041d73 100644
--- a/node_modules/eris/lib/voice/VoiceConnection.js
+++ b/node_modules/eris/lib/voice/VoiceConnection.js
@@ -114,6 +114,7 @@ class VoiceConnection extends EventEmitter {
         this.speaking = false;
         this.sequence = 0;
         this.timestamp = 0;
+        this.connectionTimeout;
         this.ssrcUserMap = {};
 
         this.nonce = Buffer.alloc(24);
@@ -147,27 +148,26 @@ class VoiceConnection extends EventEmitter {
     }
 
     connect(data) {
-        if(this.connecting) {
-            return;
-        }
         this.connecting = true;
         if(this.ws && this.ws.readyState !== WebSocket.CLOSED) {
             this.disconnect(undefined, true);
             return setTimeout(() => this.connect(data), 500);
         }
-        if(!data.endpoint || !data.token || !data.session_id || !data.user_id) {
+        clearTimeout(this.connectionTimeout);
+        this.connectionTimeout = setTimeout(() => {
+            if(this.connecting) {
+                this.disconnect(new Error("Voice connection timeout"));
+            }
+            this.connectionTimeout = null;
+        }, this.shard.client ? this.shard.client.options.connectionTimeout : 30000);
+        if(!data.endpoint) return; // Workaround discord voice server null (Waiting assign server).
+        if(!data.token || !data.session_id || !data.user_id) {
             this.disconnect(new Error("Malformed voice server update: " + JSON.stringify(data)));
             return;
         }
         this.channelID = data.channel_id;
         this.endpoint = data.endpoint.split(":")[0];
         this.ws = new WebSocket("wss://" + this.endpoint);
-        let connectionTimeout = setTimeout(() => {
-            if(this.connecting) {
-                this.disconnect(new Error("Voice connection timeout"));
-            }
-            connectionTimeout = null;
-        }, this.shard.client ? this.shard.client.options.connectionTimeout : 30000);
         /**
         * Fired when stuff happens and gives more info
         * @event VoiceConnection#debug
@@ -180,9 +180,9 @@ class VoiceConnection extends EventEmitter {
             * @event VoiceConnection#connect
             */
             this.emit("connect");
-            if(connectionTimeout) {
-                clearTimeout(connectionTimeout);
-                connectionTimeout = null;
+            if(this.connectionTimeout) {
+                clearTimeout(this.connectionTimeout);
+                this.connectionTimeout = null;
             }
             this.sendWS(VoiceOPCodes.IDENTIFY, {
                 server_id: this.id === "call" ? data.channel_id : this.id,
@@ -356,11 +356,7 @@ class VoiceConnection extends EventEmitter {
         this.timestamp = 0;
         this.sequence = 0;
 
-        if(reconnecting) {
-            this.pause();
-        } else {
-            this.stopPlaying();
-        }
+        this.pause();
         if(this.heartbeatInterval) {
             clearInterval(this.heartbeatInterval);
             this.heartbeatInterval = null;
@@ -383,19 +379,25 @@ class VoiceConnection extends EventEmitter {
             }
             this.ws = null;
         }
-        if(reconnecting) {
-            if(error) {
-                this.emit("error", error);
-            }
-        } else {
-            this.channelID = null;
-            this.updateVoiceState();
-            /**
-            * Fired when the voice connection disconnects
-            * @event VoiceConnection#disconnect
-            * @prop {Error?} error The error, if any
-            */
-            this.emit("disconnect", error);
+        if(error) {
+            this.emit("error", error);
+        }
+        // Workaround discord send VOICE_SERVER_UPDATE after disconnect websocket.
+        // delay clean up
+        if(!reconnecting) {
+            this.connectionTimeout = setTimeout(() => {
+                if(!this.ws && !this.connecting) {
+                    this.stopPlaying();
+                    this.channelID = null;
+                    this.updateVoiceState();
+                    /**
+                    * Fired when the voice connection disconnects
+                    * @event VoiceConnection#disconnect
+                    * @prop {Error?} error The error, if any
+                    */
+                    this.emit("disconnect", error);
+                };
+            }, 5000);
         }
     }
 
