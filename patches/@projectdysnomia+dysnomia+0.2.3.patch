diff --git a/node_modules/@projectdysnomia/dysnomia/lib/voice/VoiceConnection.js b/node_modules/@projectdysnomia/dysnomia/lib/voice/VoiceConnection.js
index c8f696a..5101e99 100644
--- a/node_modules/@projectdysnomia/dysnomia/lib/voice/VoiceConnection.js
+++ b/node_modules/@projectdysnomia/dysnomia/lib/voice/VoiceConnection.js
@@ -392,7 +392,7 @@ class VoiceConnection extends EventEmitter {
                             this.disconnect(err);
                         }
                     });
-                    const udpMessage = Buffer.allocUnsafe(74);
+                    const udpMessage = Buffer.alloc(74);
                     udpMessage.writeUInt16BE(0x1, 0);
                     udpMessage.writeUInt16BE(70, 2);
                     udpMessage.writeUInt32BE(this.ssrc, 4);
@@ -403,6 +403,7 @@ class VoiceConnection extends EventEmitter {
                     this.connecting = false;
                     this.reconnecting = false;
                     this.ready = true;
+                    if(this.paused) this.resume();
                     /**
                      * Fired when the voice connection was resumed
                      * @event VoiceConnection#resumed
@@ -546,8 +547,13 @@ class VoiceConnection extends EventEmitter {
             if(this.connecting || this.ready) {
                 let reconnecting = true;
                 if(code === 4006) {
-                    reconnecting = false;
-                } else if(code === 4014) {
+                    if (this.channelID) {
+                        reconnecting = true;
+                        err = null;
+                    } else {
+                        reconnecting = false;
+                    }
+                } else if(code === 4014 || code === 4022 || code === 4901) {
                     if(this.channelID) {
                         data.endpoint = null;
                         reconnecting = true;
@@ -555,15 +561,15 @@ class VoiceConnection extends EventEmitter {
                     } else {
                         reconnecting = false;
                     }
-                } else if(code === 1000) {
+                } else if(code === 1000 || code === 4021) {
                     reconnecting = false;
                 }
 
-                this.disconnect(err, reconnecting);
+                const canResume = code === 4015 || code < 4000;
+                this.disconnect(err, reconnecting, canResume);
 
                 if(reconnecting) {
                     // Reset resume params if we cant resume
-                    const canResume = code === 4015 || code < 4000;
                     if(!canResume) {
                         this.wsSequence = -1;
                         this.sessionID = null;
@@ -651,7 +657,7 @@ class VoiceConnection extends EventEmitter {
         }
     }
 
-    disconnect(error, reconnecting) {
+    disconnect(error, reconnecting, resume = false) {
         this.connecting = false;
         this.reconnecting = reconnecting;
         this.ready = false;
@@ -662,11 +668,15 @@ class VoiceConnection extends EventEmitter {
         }
 
         try {
-            if(!reconnecting) {
+            if(!resume) {
                 this.speaking = false;
                 this.timestamp = 0;
                 this.sequence = 0;
-                this.stopPlaying();
+                if(reconnecting) {
+                    this.pause();
+                } else {
+                    this.stopPlaying();
+                }
             }
         } catch(err) {
             this.emit("error", err);
@@ -675,7 +685,7 @@ class VoiceConnection extends EventEmitter {
             clearInterval(this.heartbeatInterval);
             this.heartbeatInterval = null;
         }
-        if(!reconnecting) {
+        if(!resume) {
             this.#closeUDP();
         }
         if(this.ws) {
diff --git a/node_modules/@projectdysnomia/dysnomia/lib/voice/streams/OggOpusTransformer.js b/node_modules/@projectdysnomia/dysnomia/lib/voice/streams/OggOpusTransformer.js
index b862645..cfc778c 100644
--- a/node_modules/@projectdysnomia/dysnomia/lib/voice/streams/OggOpusTransformer.js
+++ b/node_modules/@projectdysnomia/dysnomia/lib/voice/streams/OggOpusTransformer.js
@@ -5,6 +5,7 @@ const BaseTransformer = require("./BaseTransformer");
 class OggOpusTransformer extends BaseTransformer {
     #bitstream = null;
     #remainder = null;
+    #incompleteSegment = null;
 
     process(buffer) {
         if(buffer.length - buffer._index <= 26) {
@@ -16,9 +17,6 @@ class OggOpusTransformer extends BaseTransformer {
         }
 
         const typeFlag = buffer.readUInt8(buffer._index + 5);
-        if(typeFlag === 1) {
-            return new Error("OGG continued page not supported");
-        }
 
         const bitstream = buffer.readUInt32BE(buffer._index + 14);
 
@@ -58,6 +56,10 @@ class OggOpusTransformer extends BaseTransformer {
                 if(byte === "OpusTags") {
                     this.emit("debug", segment.toString());
                 } else if(bitstream === this.#bitstream) {
+                    if (typeFlag === 1 && this.#incompleteSegment) {
+                        segment = Buffer.concat([this.#incompleteSegment, segment]);
+                        this.#incompleteSegment = null;
+                    }
                     this.push(segment);
                 }
             } else if(byte === "OpusHead") {
@@ -67,12 +69,19 @@ class OggOpusTransformer extends BaseTransformer {
                 this.emit("debug", "Invalid codec: " + byte);
             }
         }
+
+        // Save incomplete segment
+        if (size !== 0) {
+            buffer._index += size;
+            this.#incompleteSegment = buffer.subarray(buffer._index - size, buffer._index);
+        }
     }
 
-    _final() {
+    _final(cb) {
         if(!this.#bitstream) {
             this.emit("error", new Error("No Opus stream was found"));
         }
+        cb();
     }
 
     _transform(chunk, enc, cb) {
